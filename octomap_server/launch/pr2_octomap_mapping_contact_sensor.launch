<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
  <arg name="input" default="/kinect_head_c2/depth_registered/points"/>
  <arg name="frame_id" default="base_footprint"/>

  <node  name="resize_points_publisher"
         pkg="jsk_pcl_ros" type="resize_points_publisher">
    <remap from="~input" to="$(arg input)" />
    <remap from="~output" to="$(arg input)_resized" />
    <param name="step_x" value="4" />
    <param name="step_y" value="4" />
  </node>

  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server"
        output="screen">
    <param name="resolution" value="0.05" />

    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="$(arg frame_id)"/>

    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="5.0" />

    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="$(arg input)_resized" />

    <rosparam command="load" file="$(find octomap_server)/config/pr2_contact_sensor_config.yaml" />

    <!-- <param name="robot_description" textfile="$(find hrpsys_gazebo_tutorials)/environment_models/Cube/Cube.urdf" /> -->
    <param name="robot_description"  command="$(find xacro)/xacro.py '$(find pr2_description)/robots/pr2.urdf.xacro'" />

    <!-- Sensor Input PassThrough Filter Params -->
    <param name="pointcloud_min_z" value="0.00" />
    <param name="pointcloud_max_z" value="1.5" />
    <param name="pointcloud_min_y" value="-2" />
    <param name="pointcloud_max_y" value="2" />
    <param name="pointcloud_min_x" value="-2" />
    <param name="pointcloud_max_x" value="2" />
  </node>

  <node pkg="octomap_server" type="pr2_contact_sensor.py" name="test_contact_sensor"
        output="screen" />

</launch>
